{
	"info": {
		"_postman_id": "ca2eb6c9-f344-4bfb-99f0-796f4c08cb75",
		"name": "Contact List Documentation",
		"description": "This is the API for the Contact List App: \nhttps://thinking-tester-contact-list.herokuapp.com/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34172593",
		"_collection_link": "https://user-api-testing.postman.co/workspace/API_Project~1590d5d7-45a3-40c3-904a-d56e7452d359/collection/34172593-ca2eb6c9-f344-4bfb-99f0-796f4c08cb75?action=share&source=collection_link&creator=34172593"
	},
	"item": [
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Add Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"birthdate\": \"1970-01-01\",\n    \"email\": \"jdoe@fake.com\",\n    \"phone\": \"8005555555\",\n    \"street1\": \"1 Main St.\",\n    \"street2\": \"Apartment A\",\n    \"city\": \"Anytown\",\n    \"stateProvince\": \"KS\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": [
						{
							"name": "Add Contact",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"birthdate\": \"1970-01-01\",\n    \"email\": \"jdoe@fake.com\",\n    \"phone\": \"8005555555\",\n    \"street1\": \"1 Main St.\",\n    \"street2\": \"Apartment A\",\n    \"city\": \"Anytown\",\n    \"stateProvince\": \"KS\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"contacts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"_id\": \"6085a221fcfc72405667c3d4\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"birthdate\": \"1970-01-01\",\n    \"email\": \"jdoe@fake.com\",\n    \"phone\": \"8005555555\",\n    \"street1\": \"1 Main St.\",\n    \"street2\": \"Apartment A\",\n    \"city\": \"Anytown\",\n    \"stateProvince\": \"KS\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\",\n    \"owner\": \"6085a21efcfc72405667c3d4\",\n    \"__v\": 0\n}"
						}
					]
				},
				{
					"name": "Get Contact List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": [
						{
							"name": "Get Contact List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"contacts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "[\n    {\n        \"_id\": \"6085a221fcfc72405667c3d4\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"birthdate\": \"1970-01-01\",\n        \"email\": \"jdoe@fake.com\",\n        \"phone\": \"8005555555\",\n        \"street1\": \"1 Main St.\",\n        \"street2\": \"Apartment A\",\n        \"city\": \"Anytown\",\n        \"stateProvince\": \"KS\",\n        \"postalCode\": \"12345\",\n        \"country\": \"USA\",\n        \"owner\": \"6085a21efcfc72405667c3d4\",\n        \"__v\": 0\n    },\n    {\n        \"_id\": \"607b29861ba4d3a0b96733bc\",\n        \"firstName\": \"Jan\",\n        \"lastName\": \"Brady\",\n        \"birthdate\": \"2001-11-11\",\n        \"email\": \"fake2@gmail.com\",\n        \"phone\": \"8008675309\",\n        \"street1\": \"100 Elm St.\",\n        \"city\": \"Springfield\",\n        \"stateProvince\": \"NE\",\n        \"postalCode\": \"23456\",\n        \"country\": \"United States\",\n        \"owner\": \"6085a21efcfc72405667c3d4\",\n        \"__v\": 0\n    }\n]"
						}
					]
				},
				{
					"name": "Get Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{LoginURL}}/contacts/{{contactId}}",
							"host": [
								"{{LoginURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Contact",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"_id\": \"6085a221fcfc72405667c3d4\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"birthdate\": \"1970-01-01\",\n    \"email\": \"jdoe@fake.com\",\n    \"phone\": \"8005555555\",\n    \"street1\": \"1 Main St.\",\n    \"street2\": \"Apartment A\",\n    \"city\": \"Anytown\",\n    \"stateProvince\": \"KS\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\",\n    \"owner\": \"6085a21efcfc72405667c3d4\",\n    \"__v\": 0\n}"
						}
					]
				},
				{
					"name": "Update Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Amy\",\n    \"lastName\": \"Miller\",\n    \"birthdate\": \"1992-02-02\",\n    \"email\": \"amiller@fake.com\",\n    \"phone\": \"8005554242\",\n    \"street1\": \"13 School St.\",\n    \"street2\": \"Apt. 5\",\n    \"city\": \"Washington\",\n    \"stateProvince\": \"QC\",\n    \"postalCode\": \"A1A1A1\",\n    \"country\": \"Canada\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LoginURL}}/contacts/{{contactId}}",
							"host": [
								"{{LoginURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": [
						{
							"name": "Update Contact",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Amy\",\n    \"lastName\": \"Miller\",\n    \"birthdate\": \"1992-02-02\",\n    \"email\": \"amiller@fake.com\",\n    \"phone\": \"8005554242\",\n    \"street1\": \"13 School St.\",\n    \"street2\": \"Apt. 5\",\n    \"city\": \"Washington\",\n    \"stateProvince\": \"QC\",\n    \"postalCode\": \"A1B2D4\",\n    \"country\": \"Canada\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"_id\": \"6085a221fcfc72405667c3d4\",\n    \"firstName\": \"Amy\",\n    \"lastName\": \"Miller\",\n    \"birthdate\": \"1992-02-02\",\n    \"email\": \"amiller@fake.com\",\n    \"phone\": \"8005554242\",\n    \"street1\": \"13 School St.\",\n    \"street2\": \"Apt. 5\",\n    \"city\": \"Washington\",\n    \"stateProvince\": \"QC\",\n    \"postalCode\": \"A1A1A1\",\n    \"country\": \"Canada\"\n    \"owner\": \"6085a21efcfc72405667c3d4\",\n    \"__v\": 0\n}"
						}
					]
				},
				{
					"name": "Update Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Anna\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						},
						"description": "The PATCH Update Contact operation is not available through the UI."
					},
					"response": [
						{
							"name": "Update Contact",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Anna\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"_id\": \"6085a221fcfc72405667c3d4\",\n    \"firstName\": \"Anna\",\n    \"lastName\": \"Miller\",\n    \"birthdate\": \"1992-02-02\",\n    \"email\": \"amiller@fake.com\",\n    \"phone\": \"8005554242\",\n    \"street1\": \"13 School St.\",\n    \"street2\": \"Apt. 5\",\n    \"city\": \"Washington\",\n    \"stateProvince\": \"QC\",\n    \"postalCode\": \"A1B2D4\",\n    \"country\": \"Canada\"\n    \"owner\": \"6085a21efcfc72405667c3d4\",\n    \"__v\": 0\n}"
						}
					]
				},
				{
					"name": "Delete Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Deletion success message received\", function () {",
									"    pm.response.to.have.body(\"Contact deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{LoginURL}}/contacts/{{contactId}}",
							"host": [
								"{{LoginURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Contact",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "Contact deleted"
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Login User",
					"item": [
						{
							"name": "Log In User valid credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"var jsonDatatoken = pm.response.json().token;\r",
											"pm.collectionVariables.set(\"$token\", jsonDatatoken);\r",
											"\r",
											"let response = pm.response.json();\r",
											"pm.test(\"Response contains Required fields\", function () {\r",
											"    pm.expect(response.user).to.have.property(\"firstName\");\r",
											"    pm.expect(response.user).to.have.property(\"lastName\");\r",
											"    pm.expect(response.user).to.have.property(\"email\");\r",
											"   \r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdlOTM5ZTdiYzU2NjAwMTVlM2I3ZDAiLCJpYXQiOjE3NTMxMjY3OTh9.zp3n7ZqV_aE6ml3TFwvWLYoEFOpeqM4Tq5cJl2gvWaQ\"",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"password\": \"myNewPassword\",\n    \"email\": \"Nagham22990@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Log In User",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test2@fake.com\",\n    \"password\": \"myNewPassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
											"protocol": "https",
											"host": [
												"thinking-tester-contact-list",
												"herokuapp",
												"com"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"_id\": \"608b2db1add2691791c04c89\",\n        \"firstName\": \"Updated\",\n        \"lastName\": \"Username\",\n        \"email\": \"test2@fake.com\",\n        \"__v\": 212\n    },\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDgyMWYzMDYyZmJiMjEzZTJhZDlhMjAiLCJpYXQiOjE2MTk3MzQ0NDB9.4CftGzYRmK04PJv6xKqmWWo9iOH2wlizEU8vk-L48LI\"\n}"
								}
							]
						},
						{
							"name": "Login in with invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"hlamousa.com\", \r\n    \"password\": \"myPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{LoginURL}}",
									"host": [
										"{{LoginURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Wrong Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"hla26@gmail.com\" , \r\n    \"password\" : \"wrongPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{LoginURL}}",
									"host": [
										"{{LoginURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with unregistered email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"hlatest@gmail.com\" , \r\n    \"password\": \"myPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"\" , \r\n    \"password\": \"myPassword\"\r\n}"
								},
								"url": {
									"raw": "{{LoginURL}}",
									"host": [
										"{{LoginURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"hla26@gmail.com\" , \r\n    \"password\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{LoginURL}}",
									"host": [
										"{{LoginURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "expired token in Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNDZkODQwYzQ5OTAwMTViZjZmMTciLCJpYXQiOjE3NTMzNDczMDl9.dj-hVsxbKN3hvy8k9qFC1YL3w6SHj9_qUhBfcJMJxik",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"hlatest@gmail.com\" , \r\n    \"password\": \"myPassword\"\r\n}"
								},
								"url": {
									"raw": "{{LoginURL}}",
									"host": [
										"{{LoginURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login using GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"hla26@gmail.com\" ,\r\n    \"password: \"myPassword\" \r\n}"
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout User",
					"item": [
						{
							"name": "valid logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{$token}} ",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout with malformed token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "abc",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout using already loggedout token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout with empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout without space between Bearer and token value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer{{$token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout using GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer{{$token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/logout",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Valid Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "The DELETE User operation is not available through the UI."
							},
							"response": [
								{
									"name": "Delete User",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
											"protocol": "https",
											"host": [
												"thinking-tester-contact-list",
												"herokuapp",
												"com"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Delete non-existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete without Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete using ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me?_id=68867a11edb8dc00155f577e",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									],
									"query": [
										{
											"key": "_id",
											"value": "68867a11edb8dc00155f577e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete using malformed token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "abc",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add User",
					"item": [
						{
							"name": "add-valid-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"let token=pm.response.json()\r",
											"\r",
											"pm.environment.set(\"TOKEN\", token.token);\r",
											"\r",
											"\r",
											"pm.test(\"Response has required fields\", function () {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"user\");\r",
											"    pm.expect(res.user).to.have.property(\"_id\");\r",
											"    pm.expect(res.user).to.have.property(\"firstName\", \"nagham\");\r",
											"    pm.expect(res.user).to.have.property(\"lastName\", \"Ahmad\");\r",
											"    pm.expect(res.user).to.have.property(\"email\", \"naghamnaghamnagham12@fake.com\");\r",
											"    pm.expect(res).to.have.property(\"token\");});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"nagham\",\n    \"lastName\": \"Ahmad\",\n    \"email\": \"naghamnaghamnagham12@fake.com\",\n    \"password\": \"myPassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "add user- with missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { \r",
											" pm.response.to.have.status(400); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n \"firstName\": \"Test\", \n \"lastName\": \"User\", \n \"email\": \"Nagham2293900@gmail.com\" \n \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with already registered email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409 or 400\", function () { \r",
											" pm.expect(pm.response.code).to.be.oneOf([400, 409]); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"nagham\",\r\n    \"lastName\": \"Ahmad\",\r\n    \"email\": \"naghamahmad3326212234@fake.com\",\r\n    \"password\": \"myPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate response time is less than 700ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 700ms\", function () { \r",
											" pm.expect(pm.response.responseTime).to.be.below(700); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"nagham\",\n    \"lastName\": \"Ahmad\",\n    \"email\": \"naghamahmad33262122349@fake.com\",\n    \"password\": \"myPassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send request to incorrect URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 or 503\", function () {\r",
											" pm.expect(pm.response.code).to.be.oneOf([404, 503]);\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"nagham\",\n    \"lastName\": \"Ahmad\",\n    \"email\": \"naghamahmad3326212234@fake.com\",\n    \"password\": \"myPassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/user",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Request with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { \r",
											" pm.response.to.have.status(400); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"firstName\": \"Test\", \"lastName\": \"User\", \"emailll\": \"Nagham222222@gmail.com\", \"passworddd\": \"Password123\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify firstName over 20 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"First name allows special characters\", function () { pm.expect(pm.response.code).to.eql(400); });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"firstName\": \"ThisIsAVeryLongNameOverLimit\", \"lastName\": \"User\", \"email\": \"long@mail.com\", \"password\": \"Pass1234\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify the status of Sending request with incorrect HTTP method-BUG1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405 or 503\", function () { \r",
											" pm.expect(pm.response.code).to.be.oneOf([405, 503]); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"nagham\",\n    \"lastName\": \"Ahmad\",\n    \"email\": \"naghamahmad3326212234@fake.com\",\n    \"password\": \"myPassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "update-valid-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has user details\", function () {\r",
											" const res = pm.response.json();\r",
											" pm.expect(res).to.have.property(\"_id\");\r",
											" pm.expect(res).to.have.property(\"firstName\");\r",
											" pm.expect(res).to.have.property(\"lastName\");\r",
											" pm.expect(res).to.have.property(\"email\");\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"firstName\": \"nagham\",\r\n\"lastName\": \"Username\",\r\n \"email\": \"naghamnaghamnagham12@fake.com\",\r\n  \"password\": \"myNewPassword\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update only one field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"firstName\": \"ChangedName\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"email\": \"test.com\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with field values exceeding 20 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Last name too long\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"firstName\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"lastName\": \"User\", \"email\": \"test@fake.com\", \"password\": \"Password123\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User",
					"item": [
						{
							"name": "Get User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has user details\", function () {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"_id\");\r",
											"    pm.expect(res).to.have.property(\"firstName\");\r",
											"    pm.expect(res).to.have.property(\"lastName\");\r",
											"    pm.expect(res).to.have.property(\"email\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "The GET User Profile operation is not available through the UI."
							},
							"response": [
								{
									"name": "Get User Profile",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
											"protocol": "https",
											"host": [
												"thinking-tester-contact-list",
												"herokuapp",
												"com"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"_id\": \"608b2db1add2691791c04c89\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"email\": \"test@fake.com\",\n    \"__v\": 1\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "$token",
			"value": ""
		},
		{
			"key": "token1",
			"value": ""
		}
	]
}